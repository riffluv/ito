// GameCard‰∏ÄË≤´ÊÄß„ÉÜ„Çπ„Éà - FLAT vs FLIP VARIANT„ÅÆÊï¥ÂàóÁµ±‰∏Ä„ÇíÁ¢∫‰øù
import { render } from '@testing-library/react';
import { GameCard } from './GameCard';

describe('GameCard Consistency Tests', () => {
  const testCases = [
    { clue: "Áü≠„ÅÑ", description: "Áü≠„ÅÑ„ÉÜ„Ç≠„Çπ„Éà" },
    { clue: "‰∏≠Á®ãÂ∫¶„ÅÆÈï∑„Åï„ÉÜ„Ç≠„Çπ„Éà", description: "‰∏≠Á®ãÂ∫¶„ÉÜ„Ç≠„Çπ„Éà" },
    { clue: "ÈùûÂ∏∏„Å´Èï∑„ÅÑÈÄ£ÊÉ≥„ÉØ„Éº„Éâ„ÅÆ„ÉÜ„Ç≠„Çπ„Éà‰æã", description: "Èï∑„ÅÑ„ÉÜ„Ç≠„Çπ„Éà" },
  ];

  testCases.forEach(({ clue, description }) => {
    it(`${description}„ÅßFLAT/FLIP VARIANT„ÅåÂêå„Åò„Çπ„Çø„Ç§„É´„ÇíÊåÅ„Å§`, () => {
      // FLAT VARIANT
      const { container: flatContainer } = render(
        <GameCard
          variant="flat"
          clue={clue}
          name="„ÉÜ„Çπ„Éà„Éó„É¨„Ç§„É§„Éº"
          index={0}
        />
      );

      // FLIP VARIANT („Éï„É≠„É≥„ÉàÈù¢)
      const { container: flipContainer } = render(
        <GameCard
          variant="flip"
          flipped={false}
          clue={clue}
          name="„ÉÜ„Çπ„Éà„Éó„É¨„Ç§„É§„Éº"
          index={0}
        />
      );

      const flatTextElement = flatContainer.querySelector('[style*="translate(-50%, -50%)"]');
      const flipTextElement = flipContainer.querySelector('[style*="translate(-50%, -50%)"]');

      expect(flatTextElement).toBeTruthy();
      expect(flipTextElement).toBeTruthy();

      if (flatTextElement && flipTextElement) {
        const flatStyle = getComputedStyle(flatTextElement);
        const flipStyle = getComputedStyle(flipTextElement);

        // üéØ ÈáçË¶Å: padding, width, alignment „ÅÆÁµ±‰∏ÄÊÄß„Çí„ÉÜ„Çπ„Éà
        expect(flatStyle.padding).toBe(flipStyle.padding);
        expect(flatStyle.width).toBe(flipStyle.width);
        expect(flatStyle.display).toBe(flipStyle.display);
        expect(flatStyle.alignItems).toBe(flipStyle.alignItems);
        expect(flatStyle.justifyContent).toBe(flipStyle.justifyContent);
        expect(flatStyle.fontSize).toBe(flipStyle.fontSize);
        expect(flatStyle.lineHeight).toBe(flipStyle.lineHeight);
      }
    });
  });

  it('Êï∞Â≠óË°®Á§∫„Åß„ÅØ‰∏°„Éê„É™„Ç¢„É≥„ÉàÈñì„Åß„Çπ„Çø„Ç§„É´Áµ±‰∏Ä„Åï„Çå„Çã', () => {
    const { container: flatContainer } = render(
      <GameCard
        variant="flat"
        number={42}
        name="„ÉÜ„Çπ„Éà„Éó„É¨„Ç§„É§„Éº"
        index={0}
      />
    );

    const { container: flipContainer } = render(
      <GameCard
        variant="flip"
        flipped={true}
        number={42}
        name="„ÉÜ„Çπ„Éà„Éó„É¨„Ç§„É§„Éº"
        index={0}
      />
    );

    const flatNumElement = flatContainer.querySelector('[style*="translate(-50%, -50%)"]');
    const flipNumElement = flipContainer.querySelector('[style*="translate(-50%, -50%)"]');

    expect(flatNumElement).toBeTruthy();
    expect(flipNumElement).toBeTruthy();

    if (flatNumElement && flipNumElement) {
      const flatStyle = getComputedStyle(flatNumElement);
      const flipStyle = getComputedStyle(flipNumElement);

      expect(flatStyle.fontSize).toBe(flipStyle.fontSize);
      expect(flatStyle.textAlign).toBe(flipStyle.textAlign);
      expect(flatStyle.fontWeight).toBe(flipStyle.fontWeight);
    }
  });
});