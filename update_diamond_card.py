from pathlib import Path
path = Path("components/ui/DiamondNumberCard.tsx")
text = path.read_text(encoding="utf8")
old = "  useEffect(() => {\n    if (!textRef.current) return;\n\n    const isNewNumber = previousNumber.current === null && typeof number === \"number\";\n    const isNumberChanged =\n      previousNumber.current !== null &&\n      typeof number === \"number\" &&\n      previousNumber.current !== number;\n\n    if (isNewNumber || isNumberChanged) {\n      // 派手な登場・変更演出（軽量化：1つのtimelineに統合）\n      const tl = gsap.timeline({ defaults: { ease: \"back.out(1.85)\" } });\n\n      tl.fromTo(\n        textRef.current,\n        {\n          scale: 0,\n          rotation: -173,\n          opacity: 0,\n        },\n        {\n          scale: 1.28,\n          rotation: 0,\n          opacity: 1,\n          duration: 0.43,\n        }\n      )\n      .to(textRef.current, {\n        scale: 1,\n        duration: 0.17,\n        ease: \"power2.out\",\n      }, \"-=0.08\")\n      // 光のフラッシュ演出（同一timeline内で実行）\n      .to(textRef.current, {\n        textShadow: \"0 0 19px rgba(255,255,255,0.9), 0 0 37px rgba(58,176,255,0.8), 0 3px 7px rgba(0,0,0,0.6)\",\n        duration: 0.12,\n        ease: \"power2.out\",\n      }, \"-=0.17\")\n      .to(textRef.current, {\n        textShadow: \"0 2px 4px rgba(0,0,0,0.8), 0 4px 8px rgba(0,0,0,0.6)\",\n        duration: 0.34,\n        ease: \"power2.in\",\n      });\n\n      previousNumber.current = number;\n    } else if (isAnimating && previousNumber.current !== null) {\n      // 通常のポップアニメーション\n      gsap.to(textRef.current, {\n        scale: 1.14,\n        duration: 0.13,\n        ease: \"back.out(1.4)\",\n        yoyo: true,\n        repeat: 1,\n      });\n    } else {\n      // 初回レンダリングやリセット時\n      previousNumber.current = number;\n    }\n  }, [number, isAnimating]);"
new = "  useEffect(() => {\n    const element = textRef.current;\n    if (!element) return;\n\n    const hasNumber = typeof number === \"number\";\n    const previous = previousNumber.current;\n    const numberChanged = hasNumber && previous !== number;\n\n    gsap.killTweensOf(element);\n\n    if (numberChanged) {\n      previousNumber.current = number;\n      gsap.set(element, { willChange: \"transform\" });\n\n      gsap.timeline({\n        defaults: { ease: \"power2.out\" },\n        onComplete: () => gsap.set(element, { willChange: null, scale: 1, y: 0, opacity: 1 }),\n      })\n        .fromTo(\n          element,\n          { scale: 0.7, y: 12, opacity: 0.82 },\n          { scale: 1.08, y: 0, opacity: 1, duration: 0.24 }\n        )\n        .to(\n          element,\n          { scale: 1, duration: 0.18, ease: \"back.out(1.4)\" },\n          \"-=0.08\"\n        );\n    } else if (isAnimating && hasNumber) {\n      gsap.to(element, {\n        scale: 1.05,\n        duration: 0.18,\n        ease: \"power2.out\",\n        yoyo: true,\n        repeat: 1,\n      });\n    } else if (hasNumber) {\n      previousNumber.current = number;\n      gsap.set(element, { scale: 1, y: 0, opacity: 1 });\n    } else {\n      previousNumber.current = null;\n    }\n\n    return () => {\n      gsap.killTweensOf(element);\n      gsap.set(element, { willChange: null });\n    };\n  }, [number, isAnimating]);"
if old not in text:
    raise SystemExit('target block not found')
text = text.replace(old, new)
path.write_text(text, encoding="utf8")
