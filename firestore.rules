rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function safeText(value, min, max) {
      return value is string
        && value.size() >= min
        && value.size() <= max
        && !value.matches('.*<.*')
        && !value.matches('.*>.*');
    }

    function safeTextAllowEmpty(value, max) {
      return value is string
        && value.size() <= max
        && !value.matches('.*<.*')
        && !value.matches('.*>.*');
    }

    function optionalSafeText(value, min, max) {
      return value == null || safeText(value, min, max);
    }

    function isTimestampValue(value) {
      return value == null || value is timestamp;
    }

    function isValidRoomOptions(options) {
      return options is map
        && options.keys().hasOnly(['allowContinueAfterFail', 'resolveMode', 'displayMode', 'defaultTopicType'])
        && options.allowContinueAfterFail is bool
        && options.resolveMode is string
        && options.resolveMode in ['sort-submit']
        && (!('displayMode' in options) || options.displayMode == null || options.displayMode in ['full', 'minimal'])
        && (!('defaultTopicType' in options) || options.defaultTopicType == null || safeText(options.defaultTopicType, 1, 24));
    }

    function isValidOrderMap(order) {
      return order is map
        && order.keys().hasOnly(['list', 'decidedAt', 'lastNumber', 'failed', 'failedAt', 'total', 'proposal', 'numbers'])
        && (!('list' in order) || (order.list is list && order.list.size() <= 16))
        && (!('proposal' in order) || (order.proposal == null || (order.proposal is list && order.proposal.size() <= 16)))
        && (!('decidedAt' in order) || isTimestampValue(order.decidedAt))
        && (!('lastNumber' in order) || order.lastNumber == null || (order.lastNumber is number && order.lastNumber >= 0 && order.lastNumber <= 120))
        && (!('failed' in order) || order.failed is bool)
        && (!('failedAt' in order) || order.failedAt == null || order.failedAt is number)
        && (!('total' in order) || order.total == null || (order.total is number && order.total >= 0 && order.total <= 16))
        && (!('numbers' in order) || order.numbers == null || order.numbers is map);
    }

    function isValidResultMap(result) {
      return result is map
        && result.keys().hasOnly(['success', 'revealedAt'])
        && result.success is bool
        && (!('revealedAt' in result) || isTimestampValue(result.revealedAt));
    }

    function isValidDealMap(deal) {
      return deal is map
        && deal.keys().hasOnly(['seed', 'min', 'max', 'players'])
        && safeText(deal.seed, 1, 64)
        && deal.min is number && deal.min >= 0 && deal.min <= 120
        && deal.max is number && deal.max >= deal.min && deal.max <= 120
        && (!('players' in deal) || (deal.players is list && deal.players.size() <= 16));
    }

    function isValidRoomDoc(data) {
      return data is map
        && data.keys().hasOnly([
          'name', 'hostId', 'hostName', 'options', 'status',
          'createdAt', 'lastActiveAt', 'closedAt', 'expiresAt',
          'topic', 'topicOptions', 'topicBox',
          'order', 'result', 'deal', 'round'
        ])
        && (!('name' in data) || safeText(data.name, 1, 48))
        && (!('hostId' in data) || (data.hostId is string && data.hostId.size() > 0))
        && (!('hostName' in data) || optionalSafeText(data.hostName, 1, 32))
        && (!('options' in data) || isValidRoomOptions(data.options))
        && (!('status' in data) || data.status in ['waiting', 'clue', 'reveal', 'finished'])
        && (!('topic' in data) || data.topic == null || safeText(data.topic, 1, 120))
        && (!('topicOptions' in data) || data.topicOptions == null || (data.topicOptions is list && data.topicOptions.size() <= 12))
        && (!('topicBox' in data) || data.topicBox == null || safeText(data.topicBox, 1, 24))
        && (!('round' in data) || (data.round is number && data.round >= 0 && data.round <= 50))
        && (!('order' in data) || data.order == null || isValidOrderMap(data.order))
        && (!('result' in data) || data.result == null || isValidResultMap(data.result))
        && (!('deal' in data) || data.deal == null || isValidDealMap(data.deal))
        && (!('createdAt' in data) || data.createdAt is timestamp)
        && (!('lastActiveAt' in data) || data.lastActiveAt is timestamp)
        && (!('closedAt' in data) || isTimestampValue(data.closedAt))
        && (!('expiresAt' in data) || isTimestampValue(data.expiresAt));
    }

    function isValidPlayerDoc(data) {
      return data is map
        && data.keys().hasOnly(['name', 'avatar', 'number', 'clue1', 'ready', 'orderIndex', 'uid', 'lastSeen'])
        && safeText(data.name, 1, 24)
        && safeTextAllowEmpty(data.avatar, 64)
        && (data.number == null || (data.number is number && data.number >= 0 && data.number <= 120))
        && safeTextAllowEmpty(data.clue1, 120)
        && data.ready is bool
        && data.orderIndex is number && data.orderIndex >= 0 && data.orderIndex <= 20
        && (!('uid' in data) || optionalSafeText(data.uid, 1, 64))
        && (!('lastSeen' in data) || isTimestampValue(data.lastSeen));
    }

    function isValidChatDoc(data) {
      return data is map
        && data.keys().hasOnly(['sender', 'uid', 'text', 'createdAt'])
        && safeText(data.sender, 1, 32)
        && optionalSafeText(data.uid, 1, 64)
        && safeText(data.text, 1, 500)
        && data.text.matches('(?s).*\\S.*')
        && data.createdAt is timestamp;
    }

    match /rooms/{roomId} {
      allow read: if isAuthenticated();

      allow create: if isAuthenticated()
        && request.auth.uid == request.resource.data.hostId
        && isValidRoomDoc(request.resource.data)
        && request.resource.data.status == 'waiting';

      allow update: if isAuthenticated()
        && (
          // ホストまたは管理者による全フィールド更新
          ((isHost(roomId) || isAdmin())
            && isValidRoomDoc(request.resource.data)
            && isValidHostAssignment(roomId))
          // 全プレイヤーによるorder.proposalのみの更新（ゲーム進行中）
          || (getRoomStatus(roomId) == 'clue'
            && isValidRoomDoc(request.resource.data))
        );

      allow delete: if isAuthenticated() && (isHost(roomId) || isAdmin());

      match /players/{playerId} {
        allow read: if isAuthenticated();

        allow create: if isAuthenticated()
          && request.auth.uid == playerId
          && request.resource.data.uid == request.auth.uid
          && isWaiting(roomId)
          && isValidPlayerDoc(request.resource.data);

        allow update: if isAuthenticated()
          && (
            // 本人による更新
            (request.auth.uid == resource.data.uid
              && request.resource.data.uid == resource.data.uid
              && isValidPlayerDoc(request.resource.data)
              && (
                !('name' in request.resource.data) || resource.data.name == request.resource.data.name || isWaiting(roomId)
              )
              && (
                !('number' in request.resource.data)
                || resource.data.number == request.resource.data.number
                || (getRoomStatus(roomId) in ['clue', 'reveal'])
              ))
            // ホストによるゲーム状態リセット（特定フィールドのみ）
            || (isHost(roomId)
              && request.resource.data.uid == resource.data.uid // UID変更不可
              && request.resource.data.name == resource.data.name // 名前変更不可
              && request.resource.data.avatar == resource.data.avatar // アバター変更不可
              && isValidPlayerDoc(request.resource.data)
              && resource.data.keys().hasAll(['uid', 'name', 'avatar']) // 必須フィールド確認
            )
          );

        allow delete: if isAuthenticated() && request.auth.uid == resource.data.uid;
      }

      match /chat/{msgId} {
        allow read: if isAuthenticated();

        allow create: if isAuthenticated()
          && isValidChatDoc(request.resource.data)
          && (
            (request.resource.data.sender == 'system' && (isHost(roomId) || isAdmin()))
            || (request.resource.data.sender != 'system' && request.resource.data.uid == request.auth.uid)
          );

        allow update: if false;
        allow delete: if false;
      }

      // 通知イベント（右上トースト用）
      match /events/{eventId} {
        allow read: if isAuthenticated();

        allow create: if isAuthenticated()
          && (isHost(roomId) || isAdmin())
          && isValidEventDoc(request.resource.data);

        allow update: if false;
        allow delete: if false;
      }
    }

    function isWaiting(roomId) {
      return get(/databases/$(database)/documents/rooms/$(roomId)).data.status == 'waiting';
    }
    function isHost(roomId) {
      return get(/databases/$(database)/documents/rooms/$(roomId)).data.hostId == request.auth.uid;
    }
    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }
    function getRoomStatus(roomId) {
      return get(/databases/$(database)/documents/rooms/$(roomId)).data.status;
    }
    function isValidPlayerList(roomId, playerList) {
      return playerList.size() == 0 || playerList.size() <= 10;
    }
    function isValidEventDoc(data) {
      return data is map
        && data.keys().hasOnly(['kind','type','title','description','createdAt'])
        && data.kind == 'notify'
        && data.type is string && data.type in ['info','warning','success','error']
        && safeText(data.title, 1, 80)
        && (!('description' in data) || data.description == null || safeTextAllowEmpty(data.description, 200))
        && isTimestampValue(data.createdAt);
    }
    function isRateLimited() {
      return request.time < resource.data.lastUpdate + duration.value(1, 's');
    }
    function isValidHostAssignment(roomId) {
      return (!('hostId' in request.resource.data) || request.resource.data.hostId == resource.data.hostId)
        || (
          request.resource.data.hostId is string
          && request.resource.data.hostId.size() > 0
          && get(/databases/$(database)/documents/rooms/$(roomId)/players/$(request.resource.data.hostId)).exists()
          && get(/databases/$(database)/documents/rooms/$(roomId)/players/$(request.resource.data.hostId)).data.uid == request.resource.data.hostId
        );
    }
    function isOrderProposalOnlyUpdate() {
      return request.resource.data.keys().hasOnly(['order.proposal', 'order', 'lastActiveAt'])
        && (!('order' in request.resource.data) ||
           (request.resource.data.order is map
            && request.resource.data.order.keys().hasOnly(['proposal', 'total', 'list', 'decidedAt', 'lastNumber', 'failed', 'failedAt', 'numbers'])))
        && (!('order.proposal' in request.resource.data) || request.resource.data['order.proposal'] is list);
    }
  }
}
